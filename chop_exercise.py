# -*- coding: utf-8 -*-
"""CHOP-Exercise.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uNWfszpnKsrKIW0ZOTozxrkiaGVGSEtX

##Import Libraries
"""

import pandas as pd
import numpy as np
import datetime as dt
#!pip install DateTimeRange
from datetimerange import DateTimeRange

"""##Import Datasets

###Part 1: Assemble the project cohort

The project goal is to identify patients seen for drug overdose, determine if they had an active opioid at the start of the encounter, and if they had any readmissions for drug overdose.

Your task is to assemble the study cohort by identifying encounters that meet the following criteria:

1.The patient’s visit is an encounter for drug overdose

2.The hospital encounter occurs after July 15, 1999

3.The patient’s age at time of encounter is between 18 and 35 (Patient is considered to be 35 until turning 36)
"""

allergies = pd.read_csv("https://raw.githubusercontent.com/chop-analytics/analyst-take-home-task/master/datasets/allergies.csv")
encounters = pd.read_csv("https://raw.githubusercontent.com/chop-analytics/analyst-take-home-task/master/datasets/encounters.csv")
medications = pd.read_csv("https://raw.githubusercontent.com/chop-analytics/analyst-take-home-task/master/datasets/medications.csv")
patients = pd.read_csv("https://raw.githubusercontent.com/chop-analytics/analyst-take-home-task/master/datasets/patients.csv")
procedures = pd.read_csv("https://raw.githubusercontent.com/chop-analytics/analyst-take-home-task/master/datasets/procedures.csv")

#Both encounters and patients dataset has variable Id. We change Id in encounters to Id_Encounter.
encounters = encounters.rename(columns={"Id": "Id_Encounter"})
drug_od = encounters[encounters['REASONDESCRIPTION']=="Drug overdose"]

#create a new column, START_parsed, with the parsed dates
drug_od['START_parsed'] = pd.to_datetime(drug_od['START']).dt.date

#Keeps hospital encounters that occured after July 15, 1999
drug_od2 = drug_od[drug_od['START_parsed'] > dt.date(1999, 7, 15)]

#Keeps patients whose age at time of encounter is between 18 and 35
drug_pat = pd.merge(drug_od2, patients, left_on = "PATIENT",right_on = "Id")
drug_pat['AGE_AT_VISIT'] = round((pd.to_datetime(drug_pat['START_parsed']) - pd.to_datetime(drug_pat['BIRTHDATE'])).dt.days / 365, 1)
drug_od3 = drug_pat[(drug_pat['AGE_AT_VISIT'] >= 18) & (drug_pat['AGE_AT_VISIT'] < 36)]

study_cohort = drug_od3[encounters.columns]

"""###Part 2: Create additional fields

1. DEATH_AT_VISIT_IND: 1 if patient died during the drug overdose encounter, 0 if the patient died at a different time
"""

#create new columns, START_parsed and STOP_parsed, with the parsed dates
study_cohort[['START_parsed','STOP_parsed']] = study_cohort[['START','STOP']].\
                                                apply(lambda x: pd.to_datetime(x).dt.date)

study_pat = pd.merge(study_cohort, patients, left_on = "PATIENT",right_on = "Id")
study_pat['DEATHDATE'] = pd.to_datetime(study_pat['DEATHDATE'])

rows_na = pd.isna(study_pat['DEATHDATE'])
study_pat.loc[rows_na,'DEATH_AT_VISIT_IND'] = np.nan

rows_notna = pd.notnull(study_pat['DEATHDATE'])
study_pat.loc[rows_notna,'DEATH_AT_VISIT_IND'] = study_pat.loc[rows_notna,].apply(lambda x: x.DEATHDATE in DateTimeRange(x.START_parsed,x.STOP_parsed), axis=1)
study_pat.loc[rows_notna,'DEATH_AT_VISIT_IND'] = list(map(lambda x: [0, 1][x], study_pat.loc[rows_notna,]['DEATH_AT_VISIT_IND']))

"""2. COUNT_CURRENT_MEDS: Count of active medications at the start of the drug overdose encounter"""

med_pat = medications[medications['PATIENT'].isin(study_cohort['PATIENT'])]
study_med = study_cohort.merge(med_pat, on='PATIENT', how='left')
study_med[['START_y','STOP_y']] = study_med[['START_y','STOP_y']].\
                                                apply(lambda x: pd.to_datetime(x))

med_ind = study_med.apply(lambda x: x.START_parsed in DateTimeRange(x.START_y,x.STOP_y), axis=1)
study_med['med_ind'] = list(map(lambda x: [0, 1][x], med_ind))
active_med = study_med.groupby(['Id_Encounter','PATIENT']).agg({'med_ind':['sum']})

active_med = active_med.reset_index()

#There are 498 rows has na in STOP in study_med dataset. We mark indicator as 0 if STOP is na for medications.
#study_med[pd.isna(study_med['STOP_y'])]

active_med.columns = active_med.columns.droplevel(level = 1)
active_med = active_med.rename(columns = {"med_ind":"COUNT_CURRENT_MEDS"})

"""3. CURRENT_OPIOID_IND: 1 if the patient had at least one active medication at the start of the overdose encounter that is on the Opioids List (provided below), 0 if not"""

OpioidsList = ["Hydromorphone 325 MG","Fentanyl 100 MCG","Oxycodone-acetaminophen 100ML"]

OPIOID_ind = study_med.apply(lambda x: (x.med_ind == 1) & (x.DESCRIPTION_y in OpioidsList), axis=1)
study_med['OPIOID_ind'] = list(map(lambda x: [0, 1][x], OPIOID_ind))

study_OPIOID = study_med.groupby(['Id_Encounter','PATIENT']).agg({'OPIOID_ind':['sum']})
study_OPIOID = study_OPIOID.reset_index()
study_OPIOID.columns = study_OPIOID.columns.droplevel(level = 1)
study_OPIOID['CURRENT_OPIOID_IND'] = list(map(lambda x: [0, 1][x >= 1], study_OPIOID['OPIOID_ind']))

"""4. READMISSION_90_DAY_IND: 1 if the visit resulted in a subsequent drug overdose readmission within 90 days, 0 if not"""

study_cohort[['START_parsed','STOP_parsed']] = study_cohort[['START_parsed','STOP_parsed']].\
                                                apply(lambda x: pd.to_datetime(x))

study_cohort = study_cohort.sort_values(['PATIENT','START_parsed'])

study_cohort['READMISSION_90_DAY_IND'] = study_cohort.groupby('PATIENT').apply(lambda x : (x['START_parsed'].\
shift(-1)-x['STOP_parsed']).dt.days.le(90).astype(int)).reset_index(0).drop('PATIENT',1)

"""5. READMISSION_30_DAY_IND: 1 if the visit resulted in a subsequent drug overdose readmission within 30 days, 0 if not overdose encounter, 0 if not"""

study_cohort['READMISSION_30_DAY_IND'] = study_cohort.groupby('PATIENT').apply(lambda x : (x['START_parsed'].\
shift(-1)-x['STOP_parsed']).dt.days.le(30).astype(int)).reset_index(0).drop('PATIENT',1)

"""6. FIRST_READMISSION_DATE: The date of the index visit's first readmission for drug overdose. Field should be left as N/A if no readmission for drug overdose within 90 days"""

study_cohort['FIRST_READMISSION_DATE'] = study_cohort.groupby('PATIENT').START_parsed.shift(-1)

rows0 = study_cohort.READMISSION_90_DAY_IND == 0
study_cohort.loc[rows0,'FIRST_READMISSION_DATE'] = np.nan

"""##Submission"""

study_cohort = pd.merge(study_cohort,pd.DataFrame(drug_od3,columns = ['Id_Encounter','AGE_AT_VISIT']),on = "Id_Encounter")
study_cohort = pd.merge(study_cohort,pd.DataFrame(study_pat,columns = ['Id_Encounter','DEATH_AT_VISIT_IND']),on = "Id_Encounter")

study_cohort = pd.merge(study_cohort,pd.DataFrame(active_med,columns = ['Id_Encounter','COUNT_CURRENT_MEDS']),on = "Id_Encounter")

study_cohort = pd.merge(study_cohort,pd.DataFrame(study_OPIOID,columns = ['Id_Encounter','CURRENT_OPIOID_IND']),on = "Id_Encounter")

export = pd.DataFrame(study_cohort,columns = ['PATIENT','Id_Encounter','START_parsed','AGE_AT_VISIT','DEATH_AT_VISIT_IND','COUNT_CURRENT_MEDS','CURRENT_OPIOID_IND','READMISSION_90_DAY_IND','READMISSION_30_DAY_IND','FIRST_READMISSION_DATE'])

export['AGE_AT_VISIT'] = list(map(lambda x : str(x)[:2], export['AGE_AT_VISIT']))
export['AGE_AT_VISIT'] = export['AGE_AT_VISIT'].astype(int)

export = export.rename(columns = {"PATIENT":"PATIENT_ID","Id_Encounter":"ENCOUNTER_ID","START_parsed":"HOSPITAL_ENCOUNTER_DATE"})

export.to_csv("/content/sample_data/export.csv")